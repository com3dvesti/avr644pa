;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 15.03.2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega644PA
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega644a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;//#include <stlib.h>
;#include <delay.h>
;#include <spi.h>
;#include <math.h>
;unsigned char KOEFF_VEL=255-250;
;
;unsigned int data_adc;
;unsigned int DAT_ADC[10];
;float dt=0.00875,timer;

	.DSEG
;bit ad_7685;
;bit gotov,adc_en;
;unsigned int DAT_7685[5];
;unsigned int DATA[500],nk=0;       // счетчик сэмплов измерений
;unsigned int nk0=0;    //счетчик передаваем. данных
;void read_data_adc16();
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 005B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005C char status,data;
; 0000 005D status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 005E data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 005F if(data==0x71) {KOEFF_VEL=KOEFF_VEL+2; if(KOEFF_VEL>200) KOEFF_VEL=150; }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0060 if(data==0x77) {KOEFF_VEL=KOEFF_VEL-2; if(KOEFF_VEL<20) KOEFF_VEL=50; }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0061 //gotov=1;
; 0000 0062 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0063    {
; 0000 0064    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0065 #if RX_BUFFER_SIZE0 == 256
; 0000 0066    // special case for receiver buffer size=256
; 0000 0067    if (++rx_counter0 == 0)
; 0000 0068       {
; 0000 0069 #else
; 0000 006A    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 006B    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 006C       {
; 0000 006D       rx_counter0=0;
;PCODE: $0000003E VOL: 0
; 0000 006E #endif
; 0000 006F       rx_buffer_overflow0=1;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0070       }
; 0000 0071    }
;PCODE: $00000041 VOL: 0
; 0000 0072 }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0079 {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 007A     char data;
; 0000 007B     while (rx_counter0==0);
;PCODE: $00000049 VOL: 0
;	data -> R17
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007C     data=rx_buffer0[rx_rd_index0++];
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 007D     #if RX_BUFFER_SIZE0 != 256
; 0000 007E     if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 007F     #endif
; 0000 0080     #asm("cli")
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
	cli
;PCODE: $0000005A VOL: 0
; 0000 0081     --rx_counter0;
;PCODE: $0000005B VOL: 0
; 0000 0082     #asm("sei")
;PCODE: $0000005C VOL: 0
	sei
;PCODE: $0000005D VOL: 0
; 0000 0083     return data;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0084 }
;PCODE: $00000061 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 008D {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 008E     static int timer_ctr;
; 0000 008F     TCCR0B=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0090     TCNT0=255-40;   //1000 250
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0091     TCCR0B=0x03;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0092     //if (++timer_ctr >= 100)
; 0000 0093      // {
; 0000 0094     //      gotov = 1;
; 0000 0095     //      timer_ctr = 0;
; 0000 0096     //  }
; 0000 0097     if(adc_en)  {
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0098         PORTB.4=1;delay_us(4);PORTB.4=0;//старт АЦП
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0099         // if(ad_7685) {
; 0000 009A         // PORTB.4=1;delay_us(3);PORTB.4=0;delay_us(2);
; 0000 009B         //SPCR=0x55;SPSR=0x00;//0x56 0x5A 5e 51
; 0000 009C         DAT_7685[0]=(spi(0x00)<<0);DAT_7685[1]=spi(0x00);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009D         DAT_7685[0]=DAT_7685[0]*256+DAT_7685[1];
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 009E         DATA[nk]=DAT_7685[0];
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 009F         nk=nk+1;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00A0         if(nk>500){adc_en=0;gotov=1;nk=0;}
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A1         }
;PCODE: $00000094 VOL: 0
; 0000 00A2         //gotov=1;  // готовность данных АЦП для передачи
; 0000 00A3         timer=timer+0.001;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A4    // }
; 0000 00A5 //gotov=1;
; 0000 00A6 // putchar(0x55); putchar(0x33);putchar(0x39);
; 0000 00A7 }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 00AA {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00AB     PORTD.7=0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00AC     TCCR2B=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00AD     TCNT2=KOEFF_VEL;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00AE     TCCR2B=0x05;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00AF     delay_us(500);
;PCODE: $000000A7 VOL: 0
; 0000 00B0     PORTD.7=1;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00B1 }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;
;
;
;
;
;
;void read_data_adc16()       // одноканальный АЦП         16 разрядный
; 0000 00B9 {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00BA     SPCR=0x55;SPSR=0x00;//0x56 0x5A 5e 51
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00BB     PORTB.0 = 0;delay_us(1);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00BC     spi(0x12);DAT_ADC[0]=spi(0x00);DAT_ADC[1]=spi(0x00);DAT_ADC[2]=spi(0x00);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00BD     delay_us(1);
;PCODE: $000000C8 VOL: 0
; 0000 00BE     PORTB.0 = 1;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00BF     gotov=1;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00C0 }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 00C7 {
;PCODE: $000000CF VOL: 0
; 0000 00C8     // Declare your local variables here
; 0000 00C9 
; 0000 00CA     // Crystal Oscillator division factor: 1
; 0000 00CB     #pragma optsize-
; 0000 00CC     CLKPR=0x80;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00CD     CLKPR=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00CE     #ifdef _OPTIMIZE_SIZE_
; 0000 00CF     #pragma optsize+
; 0000 00D0     #endif
; 0000 00D1 
; 0000 00D2     // Input/Output Ports initialization
; 0000 00D3     // Port A initialization
; 0000 00D4     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00D5     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00D6     PORTA=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00D7     DDRA=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00D8 
; 0000 00D9     // Port B initialization
; 0000 00DA     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00DB     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00DC     PORTB=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00DD     DDRB=0xBF;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00DE 
; 0000 00DF     // Port C initialization
; 0000 00E0     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00E1     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00E2     PORTC=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00E3     DDRC=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00E4 
; 0000 00E5     // Port D initialization
; 0000 00E6     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00E7     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00E8     PORTD=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00E9     DDRD=0xff;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00EA 
; 0000 00EB     // Timer/Counter 0 initialization
; 0000 00EC     // Clock source: System Clock
; 0000 00ED     // Clock value: 250,000 kHz
; 0000 00EE     // Mode: Normal top=0xFF
; 0000 00EF     // OC0A output: Disconnected
; 0000 00F0     // OC0B output: Disconnected
; 0000 00F1     TCCR0A=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00F2     TCCR0B=0x03;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00F3     TCNT0=0x05;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00F4     OCR0A=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00F5     OCR0B=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00F6 
; 0000 00F7     // Timer/Counter 1 initialization
; 0000 00F8     // Clock source: System Clock
; 0000 00F9     // Clock value: Timer1 Stopped
; 0000 00FA     // Mode: Normal top=0xFFFF
; 0000 00FB     // OC1A output: Discon.
; 0000 00FC     // OC1B output: Discon.
; 0000 00FD     // Noise Canceler: Off
; 0000 00FE     // Input Capture on Falling Edge
; 0000 00FF     // Timer1 Overflow Interrupt: Off
; 0000 0100     // Input Capture Interrupt: Off
; 0000 0101     // Compare A Match Interrupt: Off
; 0000 0102     // Compare B Match Interrupt: Off
; 0000 0103     TCCR1A=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0104     TCCR1B=0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0105     TCNT1H=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0106     TCNT1L=0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0107     ICR1H=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0108     ICR1L=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0109     OCR1AH=0x00;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 010A     OCR1AL=0x00;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 010B     OCR1BH=0x00;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 010C     OCR1BL=0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 010D 
; 0000 010E     // Timer/Counter 2 initialization
; 0000 010F     // Clock source: System Clock
; 0000 0110     // Clock value: 125,000 kHz
; 0000 0111     // Mode: Normal top=0xFF
; 0000 0112     // OC2A output: Disconnected
; 0000 0113     // OC2B output: Disconnected
; 0000 0114     ASSR=0x00;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0115     TCCR2A=0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0116     TCCR2B=0x05;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0117     TCNT2=0x00;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0118     OCR2A=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0119     OCR2B=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 011A 
; 0000 011B     // External Interrupt(s) initialization
; 0000 011C     // INT0: Off
; 0000 011D     // INT1: Off
; 0000 011E     // INT2: Off
; 0000 011F     // Interrupt on any change on pins PCINT0-7: Off
; 0000 0120     // Interrupt on any change on pins PCINT8-15: Off
; 0000 0121     // Interrupt on any change on pins PCINT16-23: Off
; 0000 0122     // Interrupt on any change on pins PCINT24-31: Off
; 0000 0123     EICRA=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0124     EIMSK=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0125     PCICR=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0126 
; 0000 0127     // Timer/Counter 0 Interrupt(s) initialization
; 0000 0128     TIMSK0=0x01;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0129     // Timer/Counter 0 Interrupt(s) initialization
; 0000 012A     TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 012B     // Timer/Counter 1 Interrupt(s) initialization
; 0000 012C     TIMSK1=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 012D 
; 0000 012E     // Timer/Counter 2 Interrupt(s) initialization
; 0000 012F     TIMSK2=0x01;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0130 
; 0000 0131     // USART initialization
; 0000 0132     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0133     // USART Receiver: On
; 0000 0134     // USART Transmitter: On
; 0000 0135     // USART0 Mode: Asynchronous
; 0000 0136     // USART Baud Rate: 115200 (Double Speed Mode)
; 0000 0137     UCSR0A=0x02;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0138     UCSR0B=0x98;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0139     UCSR0C=0x06;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 013A     //UBRR0H=0x00;
; 0000 013B     //UBRR0L=0x10;
; 0000 013C     UBRR0H=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 013D     UBRR0L=0x03;    //500k
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 013E     UBRR0H=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 013F     UBRR0L=0x01;      //1MEG
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0140 
; 0000 0141     // Analog Comparator initialization
; 0000 0142     // Analog Comparator: Off
; 0000 0143     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0144     ACSR=0x80;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0145     ADCSRB=0x00;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0146     DIDR1=0x00;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0147 
; 0000 0148     // ADC initialization
; 0000 0149     // ADC disabled
; 0000 014A     ADCSRA=0x00;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 014B 
; 0000 014C     // SPI initialization
; 0000 014D     // SPI Type: Master
; 0000 014E     // SPI Clock Rate: 2*1000,000 kHz
; 0000 014F     // SPI Clock Phase: Cycle Start
; 0000 0150     // SPI Clock Polarity: Low
; 0000 0151     // SPI Data Order: MSB First
; 0000 0152     SPCR=0x51;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0153     SPSR=0x01;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0154 
; 0000 0155     // TWI initialization
; 0000 0156     // TWI disabled
; 0000 0157     TWCR=0x00;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0158 
; 0000 0159     // Global enable interrupts
; 0000 015A     #asm("sei")
;PCODE: $00000138 VOL: 0
	sei
;PCODE: $00000139 VOL: 0
; 0000 015B     PORTD.6=0;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 015C     PORTD.4=0; PORTD.5=0;  // биты для управления двигателем, один направление меняет, а другой разрешает работу контолл ...
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 015D     adc_en=1;gotov=1; nk0=0;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 015E     while (1)
;PCODE: $00000145 VOL: 0
; 0000 015F     {
; 0000 0160               //putchar(0x55);
; 0000 0161               //gotov=1;
; 0000 0162             if(!adc_en) {
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0163                   if(gotov) {  PORTD.6=1; delay_us(6);      //40
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0164                       //printf("hello atmega644 vasia\r\n");
; 0000 0165                      // printf("%9.3f %6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6.0f \r\n ", timer,wx,wy,wz,ax,ay,az,DA ...
; 0000 0166                       // printf("%6.0f \r\n",KOEFF_VEL*1.0);
; 0000 0167 
; 0000 0168                       //printf("%9.3f %9.5f   \r\n ", timer,DAT_7685[0]*2.5/65536);
; 0000 0169                       printf("%6.3f %4.0f  \r\n ", DATA[nk0]*2.5/65536,nk0*1.0);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 016A                       //delay_us(10);//
; 0000 016B 
; 0000 016C                       PORTD.6=1;  gotov=1;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 016D                       if(nk0==500){nk0=0;adc_en=1;}
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 016E                       nk0=nk0+1;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 016F                 }
; 0000 0170            }
;PCODE: $00000175 VOL: 0
; 0000 0171     }
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0172 }
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
