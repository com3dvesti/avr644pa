;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 15.03.2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega644PA
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega644a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;//#include <stlib.h>
;#include <delay.h>
;#include <spi.h>
;unsigned char KOEFF_VEL=255-250;
;
;void read_adc();
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0;
;bit gotov;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0053 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0054 char status,data;
; 0000 0055 status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0056 data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0057 if(data==0x71) {KOEFF_VEL=KOEFF_VEL+2; if(KOEFF_VEL>200) KOEFF_VEL=150; }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0058 if(data==0x77) {KOEFF_VEL=KOEFF_VEL-2; if(KOEFF_VEL<20) KOEFF_VEL=50; }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0059 //gotov=1;
; 0000 005A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 005B    {
; 0000 005C    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 005D #if RX_BUFFER_SIZE0 == 256
; 0000 005E    // special case for receiver buffer size=256
; 0000 005F    if (++rx_counter0 == 0)
; 0000 0060       {
; 0000 0061 #else
; 0000 0062    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0063    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0064       {
; 0000 0065       rx_counter0=0;
;PCODE: $0000003E VOL: 0
; 0000 0066 #endif
; 0000 0067       rx_buffer_overflow0=1;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0068       }
; 0000 0069    }
;PCODE: $00000041 VOL: 0
; 0000 006A }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0071 {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0072 char data;
; 0000 0073 while (rx_counter0==0);
;PCODE: $00000049 VOL: 0
;	data -> R17
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0074 data=rx_buffer0[rx_rd_index0++];
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0075 #if RX_BUFFER_SIZE0 != 256
; 0000 0076 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0077 #endif
; 0000 0078 #asm("cli")
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
	cli
;PCODE: $0000005A VOL: 0
; 0000 0079 --rx_counter0;
;PCODE: $0000005B VOL: 0
; 0000 007A #asm("sei")
;PCODE: $0000005C VOL: 0
	sei
;PCODE: $0000005D VOL: 0
; 0000 007B return data;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007C }
;PCODE: $00000061 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0085 {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0086 static int timer_ctr;
; 0000 0087 TCCR0B=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0088 TCNT0=255-250;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0089 TCCR0B=0x04;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 008A if (++timer_ctr >= 100)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 008B {
; 0000 008C     gotov = 1;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 008D     timer_ctr = 0;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 008E }
; 0000 008F 
; 0000 0090 //gotov=1;
; 0000 0091 // putchar(0x55); putchar(0x33);putchar(0x39);
; 0000 0092 }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0095 {
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0096 PORTD.7=0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0097 TCCR2B=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0098 TCNT2=KOEFF_VEL;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0099 TCCR2B=0x05;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 009A delay_us(500);
;PCODE: $00000082 VOL: 0
; 0000 009B PORTD.7=1;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 009C 
; 0000 009D }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;
;void read_adc()
; 0000 00A0 {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00A1 }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 00A6 {
;PCODE: $0000008C VOL: 0
; 0000 00A7 // Declare your local variables here
; 0000 00A8 
; 0000 00A9 // Crystal Oscillator division factor: 1
; 0000 00AA #pragma optsize-
; 0000 00AB CLKPR=0x80;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00AC CLKPR=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00AD #ifdef _OPTIMIZE_SIZE_
; 0000 00AE #pragma optsize+
; 0000 00AF #endif
; 0000 00B0 
; 0000 00B1 //ports:
; 0000 00B2 #include "ports.h"
; 0000 00B3 
; 0000 00B4 // Timer/Counter 0 initialization
; 0000 00B5 // Clock source: System Clock
; 0000 00B6 // Clock value: 250,000 kHz
; 0000 00B7 // Mode: Normal top=0xFF
; 0000 00B8 // OC0A output: Disconnected
; 0000 00B9 // OC0B output: Disconnected
; 0000 00BA TCCR0A=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00BB TCCR0B=0x03;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00BC TCNT0=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00BD OCR0A=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00BE OCR0B=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00BF 
; 0000 00C0 // Timer/Counter 1 initialization
; 0000 00C1 // Clock source: System Clock
; 0000 00C2 // Clock value: Timer1 Stopped
; 0000 00C3 // Mode: Normal top=0xFFFF
; 0000 00C4 // OC1A output: Discon.
; 0000 00C5 // OC1B output: Discon.
; 0000 00C6 // Noise Canceler: Off
; 0000 00C7 // Input Capture on Falling Edge
; 0000 00C8 // Timer1 Overflow Interrupt: Off
; 0000 00C9 // Input Capture Interrupt: Off
; 0000 00CA // Compare A Match Interrupt: Off
; 0000 00CB // Compare B Match Interrupt: Off
; 0000 00CC TCCR1A=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00CD TCCR1B=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00CE TCNT1H=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00CF TCNT1L=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00D0 ICR1H=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00D1 ICR1L=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00D2 OCR1AH=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00D3 OCR1AL=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00D4 OCR1BH=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00D5 OCR1BL=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00D6 
; 0000 00D7 // Timer/Counter 2 initialization
; 0000 00D8 // Clock source: System Clock
; 0000 00D9 // Clock value: 125,000 kHz
; 0000 00DA // Mode: Normal top=0xFF
; 0000 00DB // OC2A output: Disconnected
; 0000 00DC // OC2B output: Disconnected
; 0000 00DD ASSR=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00DE TCCR2A=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00DF TCCR2B=0x05;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00E0 TCNT2=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00E1 OCR2A=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E2 OCR2B=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00E3 
; 0000 00E4 // External Interrupt(s) initialization
; 0000 00E5 // INT0: Off
; 0000 00E6 // INT1: Off
; 0000 00E7 // INT2: Off
; 0000 00E8 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00E9 // Interrupt on any change on pins PCINT8-15: Off
; 0000 00EA // Interrupt on any change on pins PCINT16-23: Off
; 0000 00EB // Interrupt on any change on pins PCINT24-31: Off
; 0000 00EC EICRA=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00ED EIMSK=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00EE PCICR=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00EF 
; 0000 00F0 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00F1 TIMSK0=0x01;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00F2 
; 0000 00F3 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00F4 TIMSK1=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00F5 
; 0000 00F6 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00F7 TIMSK2=0x01;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F8 
; 0000 00F9 // USART initialization
; 0000 00FA // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00FB // USART Receiver: On
; 0000 00FC // USART Transmitter: On
; 0000 00FD // USART0 Mode: Asynchronous
; 0000 00FE // USART Baud Rate: 115200 (Double Speed Mode)
; 0000 00FF UCSR0A=0x02;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0100 UCSR0B=0x98;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0101 UCSR0C=0x06;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0102 UBRR0H=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0103 UBRR0L=0x10;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0104 
; 0000 0105 // Analog Comparator initialization
; 0000 0106 // Analog Comparator: Off
; 0000 0107 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0108 ACSR=0x80;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0109 ADCSRB=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 010A DIDR1=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 010B 
; 0000 010C // ADC initialization
; 0000 010D // ADC disabled
; 0000 010E ADCSRA=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 010F 
; 0000 0110 // SPI initialization
; 0000 0111 // SPI Type: Master
; 0000 0112 // SPI Clock Rate: 2*1000,000 kHz
; 0000 0113 // SPI Clock Phase: Cycle Start
; 0000 0114 // SPI Clock Polarity: Low
; 0000 0115 // SPI Data Order: MSB First
; 0000 0116 SPCR=0x51;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0117 SPSR=0x01;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0118 
; 0000 0119 // TWI initialization
; 0000 011A // TWI disabled
; 0000 011B TWCR=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 011C 
; 0000 011D // Global enable interrupts
; 0000 011E #asm("sei")
;PCODE: $000000DF VOL: 0
	sei
;PCODE: $000000E0 VOL: 0
; 0000 011F PORTD.6=0;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0120 PORTD.4=1; PORTD.5=1;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0121 while (1)
;PCODE: $000000E7 VOL: 0
; 0000 0122       {
; 0000 0123       //putchar(0x55);
; 0000 0124       //gotov=1;
; 0000 0125       if(gotov) { read_adc(); PORTD.6=1; delay_us(50);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0126       //printf("hello atmega644 vasia\r\n");
; 0000 0127      // printf("%9.3f %6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6.0f \r\n ", timer,wx,wy,wz,ax,ay,az,DAT_ADC[3]*1.0);
; 0000 0128        printf("%6.0f \r\n",KOEFF_VEL*1.0);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0129       delay_us(150);
;PCODE: $000000FC VOL: 0
; 0000 012A       PORTD.6=0;  gotov=0;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 012B        }
; 0000 012C       }
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 012D }
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
