;#include <mega644p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include <math.h>
;#include <spi.h>
;#include "func.h"
;#define ADC_VREF_TYPE 0xC0
;#define RG    0.0174532925         //радианы град
;
;
;//#define mkgx    0.00875*RG*2			//mk гироскопы  rad
;//#define mkgy    0.00875*RG*2			//mk гироскопы  rad
;//#define mkgz    0.00875*RG*2			//mk гироскопы  rad
;//#define mkax    0.001796		//mk аксы
;//#define mkay    0.009589		//mk аксы
;//#define mkaz    0.009589		//mk аксы.
;
;#define mkgx    1			//mk гироскопы  rad
;#define mkgy    1			//mk гироскопы  rad
;#define mkgz    1			//mk гироскопы  rad
;#define mkax    1		//mk аксы
;#define mkay    1		//mk аксы
;#define mkaz    1		//mk аксы
;#define mkadc    5.01/4096		//mk adc
;#define mkadc1    5.01/1024		//mk adc
;#define GR    57.29577951				//град рад
;#define GAIN   4.843952138e+01
;#define pi     3.141592653
;#define g     9.81
;#define k1     -0.6602452139
;#define k2     1.5891971372
;#define Gain    56.29990544
;#define n_osr    256
;float dt=0.00875,timer;

	.DSEG
;long int data_adc;
;//float Wx_sred = 0, Wy_sred = 0, Wz_sred = 0, ax_sred = 0, ay_sred = 0, az_sred = 0;
;float dat_osr[20];
;long int DAT_ADC[10];
;char gotov,test;
;bit bit_start,bit_kalib;
;bit ads_1259,ad_7685;
;int k_osr,k_del=1;
;void read_gyr();
;//void read_aks();
;void init_ads1259();
;void rreg();
;void wreg();
;void read_data();
;void kalib_data();
;unsigned char ii,i1,j,ads1259_CONFIG2=5;
;unsigned int nn;
;unsigned int DAT_7685[5];
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0068 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0069 char status,data;
; 0000 006A PORTD.4=1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 006B status=UCSR0A;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 006C data=UDR0; data=UDR0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 006D PORTD.6=1;delay_us(2);putchar(0x55);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 006E // while((UCSR0A & 0x40));
; 0000 006F   delay_us(100); PORTD.6=0;UCSR0A=0;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0070  if(data==0x72)  {   bit_start=1;PORTD.5=!PORTD.5;  } //  r вкл.
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0071  if(data==0x73)  {   bit_start=0;  } //  s вкл.
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0072  if(data==0x7A)  {   timer=0;bit_kalib=1;  } //  z сброс.
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0073 if(data==0x71)  {  ads_1259=0;ad_7685=1;PORTB.2=0;  } //   500khz.  bit_kalib q
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0074 if(data==0x77)  {  ads_1259=1;ad_7685=0;PORTB.2=1;   } //   500khz.  bit_kalib q
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0075   //if(data==0x78)  {   test=1; bit_kalib=1; kalib(); } //
; 0000 0076   //if(data==0x63)  {   test=0; } //
; 0000 0077   if(data==0x31)  {   k_del=k_del+1;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0078    if(k_del>7) {k_del=0;}
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0079    ads1259_CONFIG2=k_del;init_ads1259();} //
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007A   //if(data==0x32)  {   k_del=k_del-1; if(k_del<1) {k_del=1;} } //
; 0000 007B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 007C    {
; 0000 007D    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 007E #if RX_BUFFER_SIZE0 == 256
; 0000 007F    // special case for receiver buffer size=256
; 0000 0080    if (++rx_counter0 == 0)
; 0000 0081       {
; 0000 0082 #else
; 0000 0083    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0084    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0085       {
; 0000 0086       rx_counter0=0;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0087 #endif
; 0000 0088       rx_buffer_overflow0=1;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0089       }
; 0000 008A    }
;PCODE: $0000007D VOL: 0
; 0000 008B    PORTD.4=0;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 008C }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0093 {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0094 char data;
; 0000 0095 while (rx_counter0==0);
;PCODE: $00000087 VOL: 0
;	data -> R17
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0096 data=rx_buffer0[rx_rd_index0++];
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0097 #if RX_BUFFER_SIZE0 != 256
; 0000 0098 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0099 #endif
; 0000 009A #asm("cli")
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
	cli
;PCODE: $0000009C VOL: 0
; 0000 009B --rx_counter0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 009C #asm("sei")
;PCODE: $000000A0 VOL: 0
	sei
;PCODE: $000000A1 VOL: 0
; 0000 009D return data;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 009E }
;PCODE: $000000A5 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00A9 {
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00AA //#asm("sei")
; 0000 00AB //PORTB.3=!PORTB.3;
; 0000 00AC 
; 0000 00AD //PORTB.2=0;
; 0000 00AE TCCR0B=0x00;TCNT0=255-250;TCCR0B=0x03;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00AF timer=timer+0.001;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00B0 //if(ads_1259) {PORTB.2=1;
; 0000 00B1 //init_ads1259(); ads_1259=0,ad_7685=1;
; 0000 00B2 //delay_us(200);
; 0000 00B3 //PORTB.2=0;//delay_us(10);PORTB.2=0;
; 0000 00B4 //nn=0; //delay_us(50);
; 0000 00B5 
; 0000 00B6 //}
; 0000 00B7 //nn=nn+1;
; 0000 00B8 
; 0000 00B9 //read_data();
; 0000 00BA //DAT_ADC[4]=nn;
; 0000 00BB //rreg();
; 0000 00BC //gotov=1;
; 0000 00BD }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 00C0 {
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00C1 TCCR2B=0x00;TCNT2=255-250;TCCR2B=0x04;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00C2 PORTC.3=1;delay_us(2);PORTC.3=0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00C3 if(ad_7685) { PORTB.4=1;delay_us(3);PORTB.4=0;delay_us(2);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00C4 //SPCR=0x55;SPSR=0x00;//0x56 0x5A 5e 51
; 0000 00C5 DAT_7685[0]=(spi(0x00)<<0);DAT_7685[1]=spi(0x00);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00C6 DAT_7685[0]=DAT_7685[0]*256+DAT_7685[1];
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00C7 gotov=1;}
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00C8 }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;
;
;// Pin change 8-15 interrupt service routine
;interrupt [PC_INT1] void pin_change_isr1(void)
; 0000 00CD {
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00CE     if(!PINB.1)
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00CF     {
; 0000 00D0         //PORTB.2=0;
; 0000 00D1         PORTD.4=0;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00D2         read_data();
;PCODE: $000000E9 VOL: 0
; 0000 00D3         //rreg();
; 0000 00D4         PORTD.4=1;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00D5         //PORTB.2=0;
; 0000 00D6 
; 0000 00D7     }
; 0000 00D8 }
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;
;
;
;void read_gyr()
; 0000 00DD {   //DAT_ADC[3] = spi_rw(0x26|0x80, 0, CS_GYR);  // температура
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00DE 
; 0000 00DF //    DAT_ADC[0] = spi_rw(0x28|0x80, 0, CS_GYR);
; 0000 00E0 //    DAT_ADC[0] |= (unsigned int) spi_rw(0x29|0x80, 0, CS_GYR) << 8;
; 0000 00E1 //    DAT_ADC[1] = spi_rw(0x2A|0x80, 0, CS_GYR);
; 0000 00E2 //    DAT_ADC[1] |= (unsigned int) spi_rw(0x2B|0x80, 0, CS_GYR) << 8;
; 0000 00E3 //    DAT_ADC[2] = spi_rw(0x2C|0x80, 0, CS_GYR);
; 0000 00E4 //    DAT_ADC[2] |= (unsigned int) spi_rw(0x2D|0x80, 0, CS_GYR) << 8;
; 0000 00E5 
; 0000 00E6 //    DAT_ADC[3] = spi_rw(0x26|0x80, 0, CS_GYR);  // температура
; 0000 00E7    //DAT_ADC[3] = 245;
; 0000 00E8 }
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;
;
;
;void rreg()
; 0000 00ED {
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00EE SPCR=0x55;SPSR=0x00;//0x56 0x5A 5e 51
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00EF PORTB.0 = 0;delay_us(2);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00F0 spi(0x20);spi(0x02);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00F1 DAT_ADC[4]=spi(0x00);DAT_ADC[5]=spi(0x00);DAT_ADC[6]=spi(0x00);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00F2 //DAT_ADC[6]=spi(0x00);
; 0000 00F3 
; 0000 00F4 PORTB.0 = 1;delay_us(2);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00F5 }
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;
;void wreg()
; 0000 00F8 {
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00F9 SPCR=0x55;SPSR=0x00;//0x56 0x5A 5e 51
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00FA PORTB.0 = 0;delay_us(2);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00FB spi(0x40);spi(0x01);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00FC spi(0x14);spi(0x22);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00FD //spi(0x11);
; 0000 00FE PORTB.0 = 1;delay_us(2);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00FF }
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;
;
;void read_data()
; 0000 0103 {
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0104 SPCR=0x55;SPSR=0x00;//0x56 0x5A 5e 51
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0105 PORTB.0 = 0;delay_us(1);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0106 spi(0x12);DAT_ADC[0]=spi(0x00);DAT_ADC[1]=spi(0x00);DAT_ADC[2]=spi(0x00);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0107 delay_us(1);
;PCODE: $00000149 VOL: 0
; 0000 0108 PORTB.0 = 1;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0109 gotov=1;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 010A }
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;
;
;void init_ads1259()
; 0000 010E {
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 010F SPCR=0x55;SPSR=0x00;//0x56 0x5A 5e 51
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0110 PORTB.0 = 0;delay_us(2);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0111     spi(0x40);spi(0x08);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0112     spi(0x00);spi(0x1A);spi(ads1259_CONFIG2); //0x27
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0113     spi(0x01);spi(0x00);spi(0x00);//OFC 0x000001 0x800001 0xffffff
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0114     spi(0x00);spi(0x00);spi(0x40);// FSC 0x400000
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0115 
; 0000 0116     delay_us(2);PORTB.0 = 1;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0117 }
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;
;
;void init_aks()
; 0000 011B {
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 011C  //   spi_rw(0x20, 0xC7, CS_AXS);
; 0000 011D  //   spi_rw(0x21, 0xC9, CS_AXS);
; 0000 011E  //   spi_rw(0x22, 0x00, CS_AXS);
; 0000 011F }
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;
;void kalib_data()
; 0000 0122 {
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0123 data_adc=(DAT_ADC[0]*65536+DAT_ADC[1]*256+DAT_ADC[2])<<8;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0124 dat_osr[0]=dat_osr[0]+data_adc;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0125 if (j==100) { dat_osr[1]=dat_osr[0]/100;j=0;dat_osr[0]=0;bit_kalib=0;}
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0126 j=j+1;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0127 }
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;
;
;
;
;
;void main(void)
; 0000 012E {
;PCODE: $000001A0 VOL: 0
; 0000 012F     #pragma optsize-
; 0000 0130     CLKPR=0x80;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0131     CLKPR=0x00;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0132     #ifdef _OPTIMIZE_SIZE_
; 0000 0133     #pragma optsize+
; 0000 0134     #endif
; 0000 0135 
; 0000 0136 
; 0000 0137     PORTA=0x00;DDRA=0x0F;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0138     PORTB=0xfd;DDRB=0xfd; //
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0139 
; 0000 013A     PORTC=0x00;DDRC=0xff;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 013B     PORTD=0xFF;DDRD=0xFE;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 013C 
; 0000 013D     // Timer/Counter 0 initialization
; 0000 013E     TCCR0A=0x82;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 013F     TCCR0B=0x03;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0140     TCNT0=0x00;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0141     OCR0A=0x00;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0142     OCR0B=0x00;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0143 // Timer/Counter 2 initialization
; 0000 0144 // Clock source: System Clock
; 0000 0145 // Clock value: 250,000 kHz
; 0000 0146 // Mode: Normal top=0xFF
; 0000 0147 // OC2A output: Disconnected
; 0000 0148 // OC2B output: Disconnected
; 0000 0149 ASSR=0x00;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 014A TCCR2A=0x00;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 014B TCCR2B=0x04;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 014C TCNT2=0x00;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 014D OCR2A=0x00;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 014E OCR2B=0x00;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 014F     // External Interrupt(s) initialization
; 0000 0150     EICRA=0x00;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0151     EIMSK=0x00;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0152     //PCMSK0=0x02;
; 0000 0153     //PCMSK1=0x01;
; 0000 0154     //PCICR=0x02;//3
; 0000 0155     //PCIFR=0x02;//3
; 0000 0156 
; 0000 0157 
; 0000 0158 EICRA=0x00;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0159 EIMSK=0x00;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 015A PCMSK1=0x02;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 015B PCICR=0x02;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 015C PCIFR=0x02;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 015D //PCMSK1=(0<<PCINT15) | (0<<PCINT14) | (0<<PCINT13) | (0<<PCINT12) | (0<<PCINT11) | (0<<PCINT10) | (0<<PCINT9) | (1<<PCI ...
; 0000 015E //PCICR=(0<<PCIE3) | (0<<PCIE2) | (1<<PCIE1) | (0<<PCIE0);
; 0000 015F //PCIFR=(0<<PCIF3) | (0<<PCIF2) | (1<<PCIF1) | (0<<PCIF0);
; 0000 0160 
; 0000 0161     // Timer/Counter 0 Interrupt(s) initialization
; 0000 0162     TIMSK0=0x01;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0163     // Timer/Counter 1 Interrupt(s) initialization
; 0000 0164     TIMSK1=0x00;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0165     // Timer/Counter 2 Interrupt(s) initialization
; 0000 0166     TIMSK2=0x01;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0167 
; 0000 0168     // Analog Comparator initialization
; 0000 0169     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 016A     ADCSRA=0x8C;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 016B 
; 0000 016C     // SPI initialization
; 0000 016D     SPCR=0x5e;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 016E     SPSR=0x01;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 016F     SPCR=0x52;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0170     SPSR=0x01;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0171 
; 0000 0172     // TWI initialization
; 0000 0173     // TWI disabled
; 0000 0174     TWCR=0x00;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0175     // USART0 initialization   115200
; 0000 0176     UCSR0A=0x00;//
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0177     UCSR0B=0x98;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0178     UCSR0C=0x06;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0179     UBRR0H=0;//21
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 017A     UBRR0L=0x10;//21  115200   20
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 017B     UBRR0L=0;//21 230khz
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 017C     UCSR0A=2;UBRR0H=0;UBRR0L=5;//4 500khz
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 017D     UCSR0A=2;UBRR0H=0;UBRR0L=11;//4 250khz
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 017E     UCSR0A=2;UBRR0H=0;UBRR0L=0x19;//4 115khz
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 017F     //UBRR0L=1;//4 1250khz
; 0000 0180     //UBRR0L=0;//21 500khz
; 0000 0181     // USART1 initialization
; 0000 0182     UCSR1A=0x02;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0183     // UCSR1B=0x98;    // interrupt ON
; 0000 0184     UCSR1B=0x18;    // interrupt OFF
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0185     UCSR1C=0x06;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0186     UBRR1H=0x01;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0187     UBRR1L=0x03;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0188 
; 0000 0189     //PORTC.0=1;PORTC.1=1;
; 0000 018A     init_ads1259(); //init gyroscopes
;PCODE: $00000215 VOL: 0
; 0000 018B     init_ads1259(); //init gyroscopes
;PCODE: $00000216 VOL: 0
; 0000 018C     //read_gyr();  init_gyr();
; 0000 018D     //init_aks(); //init aks
; 0000 018E     //read_aks();
; 0000 018F     //bit_compass=1;
; 0000 0190     //bit_kalib=1;
; 0000 0191 
; 0000 0192     //wreg(); wreg();
; 0000 0193     PORTD.6=1; PORTD.4=0;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0194     PORTB.0=1;PORTB.2=1;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0195     //delay_ms(10);
; 0000 0196 // Watchdog Timer initialization
; 0000 0197 // Watchdog Timer Prescaler: OSC/2k
; 0000 0198 // Watchdog timeout action: Reset
; 0000 0199 #pragma optsize-
; 0000 019A //WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (1<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
; 0000 019B //WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (0<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
; 0000 019C //WDTCSR=0x11;WDTCSR=0x01;
; 0000 019D #ifdef _OPTIMIZE_SIZE_
; 0000 019E #pragma optsize+
; 0000 019F #endif
; 0000 01A0 
; 0000 01A1     #asm("sei")
;PCODE: $0000021F VOL: 0
	sei
;PCODE: $00000220 VOL: 0
; 0000 01A2 
; 0000 01A3     while (1)
;PCODE: $00000221 VOL: 0
; 0000 01A4     //PORTC.3=1;delay_us(10);PORTC.3=0;;
; 0000 01A5     //PORTB.3=!PORTB.3;
; 0000 01A6     //putchar(0x55);
; 0000 01A7    // bit_kalib=1;gotov=1;
; 0000 01A8      {
; 0000 01A9      if(bit_kalib) {
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 01AA       if(gotov==1)  {   gotov=0;kalib_data();}
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 01AB          }
;PCODE: $0000022A VOL: 0
; 0000 01AC   bit_start=1;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 01AD     if(bit_start)
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 01AE     {
; 0000 01AF     //gotov=1;
; 0000 01B0         if(gotov==1)
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 01B1         {
; 0000 01B2         gotov=0;
;PCODE: $00000234 VOL: 0
; 0000 01B3         data_adc=(DAT_ADC[0]*65536+DAT_ADC[1]*256+DAT_ADC[2])<<8;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 01B4         //    PORTA.0=1;
; 0000 01B5          //   k_del=1;
; 0000 01B6             //if(bit_kalib) {kalib();} else { read_data();}
; 0000 01B7          //   read_data();
; 0000 01B8             //i1=i1+1;
; 0000 01B9             if(i1==15)
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 01BA             { i1=0;
;PCODE: $00000248 VOL: 0
; 0000 01BB              //putchar(0x55);
; 0000 01BC                 //#asm("cli")
; 0000 01BD                 PORTD.6=1;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 01BE                 delay_us(1);
;PCODE: $0000024B VOL: 0
; 0000 01BF                 ads_1259=1;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 01C0                 //putchar(0x55);
; 0000 01C1                 //printf("%9.3f %9.3f  %9.3f  %9.3f  %9.3f  %9.3f  %4.0f  \r\n ", mwxyz[0],mwxyz[1],mwxyz[2],maxyz[0],ma ...
; 0000 01C2                 //printf("%9.3f %6.0f %6.0f %6.0f %10.0f  \r\n ", timer,DAT_ADC[0]*1.0,DAT_ADC[1]*1.0,DAT_ADC[2]*1.0,(65 ...
; 0000 01C3                 //printf(" %9.3f %9.0f %3.0f %3.0f %3.0f\r\n ", timer,data_adc*1.0,DAT_ADC[4]*1.0,DAT_ADC[5]*1.0,DAT_ADC ...
; 0000 01C4                 if(ads_1259)
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 01C5                  {printf(" %9.3f  %3.0f   %10.7f \r\n ", timer,ads1259_CONFIG2*1.0,(data_adc-dat_osr[1])*10.0/(256*16777 ...
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 01C6                 if(ad_7685)
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 01C7                 {printf("%9.3f %9.5f   \r\n ", timer,DAT_7685[0]*2.5/65536); }
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 01C8                 //#asm("sei")
; 0000 01C9                 // ВРЕМЯ НЕПРАВИЛЬНОЕ
; 0000 01CA                 delay_us(40);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 01CB                 PORTD.6=0; }
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 01CC               i1=i1+1;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 01CD 
; 0000 01CE         }
; 0000 01CF     }
;PCODE: $00000286 VOL: 0
; 0000 01D0 }
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 01D1 
; 0000 01D2 }
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
